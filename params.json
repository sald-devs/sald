{"name":"Sald","tagline":"Studio A Ludum Dare","body":"# Welcome to SALD!\r\nSALD is a lightweight custom built web based Game Engine that enables users to develop games quickly and easily. This engine written in JavaScript using the Node.js run time environment. The engine is divided distinctly into various modules which can be imported by the user. The user can then implement game mechanics and other aspects of the game using functions provided through these modules.\r\n\r\n##Installation instructions\r\nFork this repo into desired location then from command line run\r\n```\r\nnpm link\r\n```\r\nNote: sudo may be required on Mac or Linux, or the command prompt may need to be\r\nrun as administrator on Windows.\r\n\r\nNote: The current version of node.js for windows has a bug. If you receive an\r\nENOENT error, check [here](http://stackoverflow.com/questions/25093276/node-js-windows-error-enoent-stat-c-users-rt-appdata-roaming-npm)\r\n##\r\n##Usage\r\n```\r\nsald [command] args\r\n  commands\r\n    new/create [dir] - create a new sald project\r\n    build - build sald project in cwd based on build.js\r\n```\r\nYou will want to use `sald create myProjName` to create a starter project. It is not\r\nrecommended to do this in the sald directory.\r\n##build.js\r\nThe build.js file must be in the current working directory when calling sald build.\r\nThis file should export an object which specifies the output location, entry point, and the method for handling custom file types.\r\nBy default, Sald handles transformations for common types, like `.js`, `.json`, `.png`, `.jpg`, `.wav`, `.ogg`. You may override these with your own handlers if you wish. All other filetypes will need a handler implemented in this `build.js`.\r\n\r\nSald can also handle `colon`ical transforms, specified like `gradient:#000-#fff`, for which you must specify a function which generates a JS block that exports the expected return value.\r\n\r\nEach transform can also take the object form `{canonicalFunc: aFunc, tranformFunc: bFunc}`, where `bFunc` is what you used before, and `aFunc` is used to determine the canonical name of the parameter. This is used to ensure there is no duplication of resolved `require`s in the final output html file. If the transform is not in this object form, then a default canonical function is assumed (direct string comparison for `colon`icals, and normalized path comparison for file extension types).\r\n\r\n###Example build.js\r\n```\r\nfunction gradientCanon(param) {\r\n  // some conversion here\r\n  // ex: 'black-white' will be converted to '#000-#fff'\r\n  return convertedString;\r\n}\r\n\r\nfunction gradientTransform(param) {\r\n  // some external imagemagick call\r\n  return 'var img = new Image(); img.src = ' + base64Data + '; module.exports = img;';\r\n}\r\n\r\nfunction unownCanon(filepath, rootpath) {\r\n  // rootpath is the name of the folder where the require is called. Useful for relative require parsing, using _path.join_\r\n  canonicalName = someTransformation();\r\n  return canonicalName;\r\n}\r\n\r\nfunction unownLoader(filepath) {\r\n  // filepath passed is the resule of unownCanon\r\n  var someJsTxt = something //your loader\r\n  return 'module.exports = ' + someJsTxt;\r\n}\r\n\r\n// Export build options\r\nmodule.exports = {\r\n  // Entry point for build\r\n  entry :  {\r\n    js : 'src/main.js',       //the script to be called\r\n    html : 'src/main.html'    //will be used as template for final output\r\n  },\r\n  // Output options\r\n  output : {\r\n    html : 'build.html'  //location to output final built project\r\n  },\r\n  // Options for each file type\r\n  transforms : {\r\n    'gradient:': {\r\n      canonicalFunc: gradientCanon,\r\n      transformFunc: gradientTransform\r\n    },\r\n    '.unown': { // If a custom canonicalization is needed\r\n      canonicalFunc: unownCanon,\r\n      transformFunc: unownLoader\r\n    },\r\n    '.unown': unownLoader // If no custom canonicalization is needed for this type\r\n};\r\n```\r\n\r\nThis build.js file now knows what to do with a `require('../pokedex/pokemon87.unown');` or `require('gradient:black-white')`.\r\n\r\n\r\n##Libraries\r\n\r\n- [mainloop.js](sald/mainloop.js) [docs](docs/mainloop.md) provides a basic mainloop.\r\n- [benchmark.js](sald/benchmark.js) [docs](docs/benchmark.md) contains utility functions for benchmarking.\r\n- [collide.js](sald/collide.js) [docs](docs/collide.md) contains collision checking functions.\r\n- [Sprite.js](sald/Sprite.js) [docs](docs/Sprite.md) is a class that wraps spritesheets and makes it easy to select frames and animations.\r\n- [Tilemap.js](sald/Tilemap.js) [docs](docs/Tilemap.md) is a class that wraps maps made of image tiles.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}